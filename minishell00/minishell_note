
Bibliotheques necessaires :

#include <readline/readline.h> //Pour les fonctions de readline
#include <stdio.h>      // Pour printf
#include <stdlib.h>     // Pour malloc, free, exit
#include <string.h>     // Pour strerror
#include <unistd.h>     // Pour access, write, close, fork, execve, dup, dup2, pipe, getcwd, chdir, isatty, ttyname
#include <sys/types.h>  // Pour wait, waitpid, wait3, wait4, signal, stat, lstat, fstat, unlink, opendir, readdir, closedir
#include <sys/wait.h>   // Pour wait, waitpid, wait3, wait4
#include <sys/stat.h>   // Pour stat, lstat, fstat
#include <fcntl.h>      // Pour open
#include <signal.h>     // Pour signal, sigaction, sigemptyset, sigaddset, kill
#include <termios.h>    // Pour tcsetattr, tcgetattr
#include <curses.h>     // Pour tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs
#include <dirent.h>     // Pour opendir, readdir, closedir
#include <sys/ioctl.h>  // Pour ioctl
#include <pwd.h>        // Pour getpwnam
#include <errno.h>      // Pour errno
==================================================================

Command	Description :
(source: https://github.com/maiadegraaf/minishell/tree/main)

=>cd : with only a relative or absolute path
--------------------------------------------
Changes the working directory of the current shell execution environment and updates the environment variables PWD and OLDPWD.
Without arguments it change the working directory to the home directory.
- changes the directory to the OLDPWD. (une doute si l'option est vraiment a gere)
remarque :
OLDPWD n'existe pas au debut, il est cree au moment de la 1er utilistion du cd. OLDPWD prends la valeur du PWD et La valeur de PWD se met a jour.
remarque : code de sortie de echo
0 -> succes
>0 -> erreur

=>echo : with option -n
-----------------------
Displays a line of text
Optional flag -n: do not output the trailing newline
remarque : code de sortie de echo
0 -> succes
>0 -> erreur

=>env : with no options or arguments
------------------------------------
Displays the environment variable
remarque: code de sortie de env
0 -> succes
>0 -> erreur
126 ->env a été trouvée mais n'a pas pu être exécutée
127 ->n'a pas pu être exécutée


=>exit : with no options
------------------------
Terminates the shell.
Accepts optional argument n, which sets the exit status to n.

=>export : with no options
--------------------------
Accepts arguments name[=value].
Adds name to the environment. Set's value of name to value.
If no argument is given, displays list of exported variables.

=>pwd : with no options
-----------------------
Shows the current directory as an absolute path.

=>unset : with no options
-------------------------
Accepts argument name.
Removes the variable name from the environment.

==================================================================
Tests effectues sous bash :

=> echo :

BingdeMBP:srcs bing$ echo

BingdeMBP:srcs bing$ echo -n
BingdeMBP:srcs bing$ echo -nnnnnnnn
BingdeMBP:srcs bing$ echo -n -n-n
-n-nBingdeMBP:srcs bing$ echo -n -n -n
BingdeMBP:srcs bing$ echo hello
hello
BingdeMBP:srcs bing$ echo -n hello
helloBingdeMBP:srcs bing$ echo -n hello world
hello worldBingdeMBP:srcs bing$ 
	


==================================================================
Pour ignorer les leaks causes par readline et add_history :

creer un ficher de suppression(ex : ignoreleak.supp) avec le contenu

{
    readline
    Memcheck:Leak
    ...
    fun:readline
}
{
    add_history
    Memcheck:Leak
    ...
    fun:add_history
}

lors de l'execution du programme :
executer 	valgrind --suppressions=ignoreleak.supp ./leProgramme

==================================================================

